# Nombre del workflow
name: Build Unisoc Kernel (Repo Method)

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Unisoc Kernel
    runs-on: ubuntu-22.04
    steps:
      # Pasos 1 y 2 (Sin cambios)
      - name: 1. Free Up Disk Space
        run: |
          echo "Cleaning up runner to free disk space..."
          sudo rm -rf /usr/share/dotnet /opt/ghc "/usr/local/share/boost" "$AGENT_TOOLSDİRECTORY"
          df -h
      - name: 2. Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends repo git bc build-essential curl g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev
      # --- PASO 3: INICIALIZACIÓN CORRECTA DE REPO ---
      - name: 3. Sync Build Environment with Repo
        run: |
          mkdir -p kernel-build && cd kernel-build
          
          # LA SOLUCIÓN: Usamos repo como fue diseñado, apuntando a un repositorio de manifiesto real.
          # REEMPLAZA LA URL con la de tu repositorio de manifiesto.
          repo init -u https://github.com/maxsteeel/manifest/ -b main
          
          repo sync --no-clone-bundle -j$(nproc --all)
          
          # Hacemos checkout al commit específico del kernel
          cd common && git checkout 219d54332a09e8d8741c1e1982f5eae56099de85 && cd ..

      # Paso 4: Integrar KernelSU-Next
      - name: 4. Integrate KernelSU-Next
        run: |
          cd kernel-build/common
          git clone https://github.com/KernelSU-Next/KernelSU-Next.git KernelSU
          bash KernelSU/kernel/setup.sh
          echo "KernelSU-Next integrated."
          
      # Paso 5: Compilar
      - name: 5. Configure and Build the Kernel
        run: |
          cd kernel-build
          cat <<EOF > common/build.config.unisoc
          ARCH=arm64
          LLVM_IAS=1
          CROSS_COMPILE=aarch64-linux-
          CROSS_COMPILE_COMPAT=arm-linux-
          LINUX_GCC_CROSS_COMPILE_PREBUILTS_BIN=prebuilts/gas/linux-x86
          LINUX_GCC_CROSS_COMPILE_COMPAT_PREBUILTS_BIN=prebuilts/gas/linux-x86
          MAKE_GOALS="
          Image
          "
          FILES="
          arch/arm64/boot/Image
          "
          LLVM=1
          DEPMOD=depmod
          CLANG_PREBUILT_BIN=prebuilts-master/clang/host/linux-x86/clang-r416183b/bin
          BUILDTOOLS_PREBUILT_BIN=build/build-tools/path/linux-x86
          KCFLAGS="${KCFLAGS} -D__ANDROID_COMMON_KERNEL__"
          EXTRA_CMDS=''
          STOP_SHIP_TRACEPRINTK=1
          IN_KERNEL_MODULES=1
          DO_NOT_STRIP_MODULES=1
          DEFCONFIG=defconfig
          LTO=thin
          KMI_ENFORCED=0
          
          EOF
          
          BUILD_CONFIG=common/build.config.unisoc build/build.sh

      # Paso 6: Subir los artefactos
      - name: 6. Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Unisoc-Kernel-Repo-Build
          path: |
            kernel-build/common/out/
