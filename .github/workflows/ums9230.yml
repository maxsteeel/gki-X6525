# Nombre del workflow
name: Build Unisoc Kernel 

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Unisoc Kernel
    runs-on: ubuntu-22.04
    steps:
      # --- PASO NUEVO PARA LIBERAR ESPACIO ---
      # Paso 1: Liberar Espacio en el Runner
      - name: 1. Free Up Disk Space
        run: |
          echo "Cleaning up runner to free disk space..."
          sudo rm -rf /usr/share/dotnet /opt/ghc "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
          df -h
      # Paso 2: Instalar Dependencias (antes era el 1)
      - name: 2. Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends git bc build-essential curl g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev
      # Paso 3: Descargar la Toolchain
      - name: 3. Download Toolchain
        run: |
          git clone --depth 1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 -b master-kernel-build-2021 clang-toolchain
          git clone --depth 1 https://android.googlesource.com/platform/prebuilts/build-tools/ -b master-kernel-build-2021 toolchain
          git clone --depth 1 https://android.googlesource.com/kernel/prebuilts/build-tools/ -b master-kernel-build-2021 kernel-toolchain
          git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b master-kernel-build-2021 gcc-aarch64
          echo "Toolchains downloaded successfully."
      # Paso 4: Clonar el Código Fuente
      - name: 4. Clone UMS9230 Kernel Source
        run: |
          git clone https://codeberg.org/ums9230-mainline/linux.git kernel_source
          cd kernel_source
          git checkout 219d54332a09e8d8741c1e1982f5eae56099de85
          echo "UMS9230 kernel source downloaded."
      # Paso 5: Integrar KernelSU-Next
      - name: 5. Integrate KernelSU-Next
        run: |
          cd kernel_source
          git clone https://github.com/KernelSU-Next/KernelSU-Next.git KernelSU
          bash KernelSU/kernel/setup.sh
          echo "KernelSU-Next integrated."
          
      # --- PASO 6: EL PARCHE DEFINITIVO ---
      - name: 6. Apply Full Compatibility Patch
        run: |
          cd kernel_source
          echo "Creating comprehensive patch for bison/flex compatibility..."
          
          # Creamos el archivo de parche usando un 'here document'
          cat << 'EOF' > ../bison_flex_compat.patch
          --- a/scripts/dtc/dtc-lexer.l
          +++ b/scripts/dtc/dtc-lexer.l
          @@ -33,6 +33,14 @@
            * along with this program; if not, see <http://www.gnu.org/licenses/>.
            */
           
          +%option yylineno
          +
          +%{
          +#include <stdint.h>
          +#include "dtc.h"
          +#include "dtc-parser.tab.h"
          +%}
          +
           %option noyywrap
           %option never-interactive
           
          @@ -826,7 +834,7 @@
           
           %}
           
          -YY_DECL
          +int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, void *scanner);
          +#define YY_DECL int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, void *scanner)
           {
                   for (;;) {
                           int c = getc(srcfile->f);
          --- a/scripts/dtc/dtc-parser.y
          +++ b/scripts/dtc/dtc-parser.y
          @@ -33,6 +33,12 @@
            * along with this program; if not, see <http://www.gnu.org/licenses/>.
            */
           
          +%define api.pure full
          +%locations
          +%parse-param { void *scanner }
          +%lex-param { void *scanner }
          +
           %{
           #include <stdio.h>
           #include <stdlib.h>
          @@ -39,6 +45,7 @@
           #include <limits.h>
           #include <string.h>
           #include <ctype.h>
          +#include <stdint.h>
           
           #include "dtc.h"
           
          @@ -74,7 +81,7 @@
           
           %}
           
          -extern int yylex(void);
          +extern int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, void *scanner);
           extern void yyerror(char const *s);
           
           %token	T_DTS_V1
          EOF
          
          echo "Applying patch..."
          # Aplicamos el parche que acabamos de crear
          patch -p1 < ../bison_flex_compat.patch
          echo "Patch applied successfully."
          
      # Paso 7: Configurar y Compilar
      - name: 7. Configure and Build the Kernel
        run: |
          sudo mv /usr/bin/ld /usr/bin/ld.bak
          # 2. Creamos un enlace simbólico que apunta a nuestro enlazador compatible
          sudo ln -s $GITHUB_WORKSPACE/clang-toolchain/clang-r416183b/bin/lld /usr/bin/ld
          echo "System linker has been replaced with ld.lld."
          
          cd kernel_source
          
          echo "Applying comprehensive patch to fix bison/flex pure_parser errors..."
          
          export PATH=$GITHUB_WORKSPACE/clang-toolchain/clang-r416183b/bin:$GITHUB_WORKSPACE/toolchain/linux-x86/bin:$GITHUB_WORKSPACE/kernel-toolchain/linux-x86/bin:$GITHUB_WORKSPACE/gcc-aarch64/bin:$PATH
          
          # CORRECCIÓN: Añadir CROSS_COMPILE y CC=clang para usar la toolchain correcta
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- CC=clang O=out defconfig
          
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- CC=clang O=out -j$(nproc --all)
          
          echo "Kernel build finished."
      # Paso 8: Subir los artefactos
      - name: 8. Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Unisoc-Kernel-Build
          path: |
            kernel_source/out/*
