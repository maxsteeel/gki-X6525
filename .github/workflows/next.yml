# Nombre del workflow
name: Build GKI Kernel with KernelSU-Next

# Cómo se activa este workflow
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-22.04
    steps:
      # Pasos 1-3 (Sin cambios)
      - name: 1. Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends git bc bison build-essential curl flex g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev
      - name: 2. Setup Repo Tool
        run: |
          mkdir -p ~/bin && curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo && chmod a+x ~/bin/repo && echo "$HOME/bin" >> $GITHUB_PATH
      - name: 3. Download Kernel Source
        run: |
          mkdir gki_kernel && cd gki_kernel
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android12-5.4-lts --no-repo-verify
          
          repo sync -c --no-tags --no-clone-bundle -j$(nproc --all)

      # Paso 4: Integrar KernelSU-Next
      - name: 4. Integrate KernelSU-Next
        run: |
          cd gki_kernel
          # 1. Usamos el repositorio CORRECTO de KernelSU-Next y lo clonamos en una carpeta llamada 'KernelSU'
          git clone https://github.com/KernelSU-Next/KernelSU-Next.git
          # 2. Ejecutamos el script de instalación
          bash KernelSU-Next/kernel/setup.sh

      # Paso 5: Crear Fragmento de Configuración GKI-Nativo
      - name: 5. Create GKI-Native Config Fragment
        run: |
          cd gki_kernel
          echo "CONFIG_KSU=m" > gki.fragment
          echo "CONFIG_PROC_FS=y" >> gki.fragment
          echo "# CONFIG_CPU_IDLE is not set" >> gki.fragment
          echo "# CONFIG_CPU_IDLE_GOV_MENU is not set" >> gki.fragment
          echo "# CONFIG_ARM_CPUIDLE is not set" >> gki.fragment
          echo "CONFIG_ARCH_SPRD=y" >> gki.fragment
          echo "# CONFIG_ARM_PSCI_CPUIDLE is not set" >> gki.fragment
          echo "CONFIG_PM_GENERIC_DOMAINS_SLEEP=y" >> gki.fragment
          echo "CONFIG_DRM=y" >> gki.fragment
          echo "CONFIG_DRM_KMS_HELPER=y" >> gki.fragment
          echo "CONFIG_DRM_MIPI_DSI=y" >> gki.fragment
          echo "CONFIG_DRM_BRIDGE=y" >> gki.fragment
          echo "CONFIG_DRM_PANEL_BRIDGE=y" >> gki.fragment
          echo "CONFIG_DRM_PANEL_SIMPLE=y" >> gki.fragment
          echo 'CONFIG_CMDLINE="processor.max_cstate=1 cpuidle.off=1"' >> gki_debug.fragment

          cp common/android/abi_gki_aarch64_unisoc common/android/abi_gki_aarch64
          cat common/android/abi_gki_aarch64_transsion >> common/android/abi_gki_aarch64
          curl https://raw.githubusercontent.com/maxsteeel/gki-X6525/refs/heads/main/ums9230-1h10-go.dts > common/arch/arm64/boot/dts/sprd/ums9230-1h10-go.dts
          
          sed -i '/sp9860g-1h10.dtb/a \\t\t\tums9230-1h10-go.dtb \\' common/arch/arm64/boot/dts/sprd/Makefile
          echo "DTS Makefile updated to include ums9230-1h10-go.dtb."
          
      # Paso 6: Personalizar Versión del Kernel
      - name: 6. Set Custom Kernel Version
        run: |
          sed -i 's/^echo "\$res"$/echo "-Max-X6525-GKI-Next"/' gki_kernel/common/scripts/setlocalversion
          echo "Kernel version hardcoded to -Max-X6525-GKI-Next"

      # Paso 7: Compilar el Kernel
      - name: 7. Build Kernel
        run: |
          cd gki_kernel
          while true; do echo "Build in progress - $(date)"; sleep 300; done &
          GKI_DEFCONFIG_FRAGMENT=gki.fragment LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh

      - name: 7.1. Build and Place KernelSU Module (LA SOLUCIÓN)
        run: |
          cd gki_kernel
          
          # 1. Usamos el mismo entorno de GKI para compilar SOLO el módulo de KernelSU
          BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh SKIP_MRPROPER=1 M=KernelSU-Next/kernel

          # 2. Verificamos que se creó el .ko y lo movemos al directorio de módulos principal
          # para que el siguiente paso lo encuentre y lo procese.
          echo "Buscando el módulo kernelsu.ko..."
          find out/android12-5.4/ -name "kernelsu.ko"
          cp out/android12-5.4/KernelSU-Next/kernel/kernelsu.ko out/android12-5.4/dist
          echo "kernelsu.ko movido a la raíz de salida."
          
      # Paso 8: Subir el artefacto de compilación
      - name: 8. Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: GKI-Build-Artifacts-5.4-Max-X6525-Next
          path: gki_kernel/out/android12-5.4/dist/
          
