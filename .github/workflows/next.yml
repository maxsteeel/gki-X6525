# Nombre del workflow
name: Build GKI Kernel with KernelSU-Next

# Cómo se activa este workflow
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-22.04
    steps:
      # Pasos 1-3 (Sin cambios)
      - name: 1. Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends git bc bison build-essential curl flex g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev
      - name: 2. Setup Repo Tool
        run: |
          mkdir -p ~/bin && curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo && chmod a+x ~/bin/repo && echo "$HOME/bin" >> $GITHUB_PATH
      - name: 3. Download Kernel Source
        run: |
          mkdir gki_kernel && cd gki_kernel
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android12-5.4 --no-repo-verify
          sed -i 's|path="common" name="kernel/common" revision="android12-5.4"|path="common" name="kernel/common" revision="android12-5.4.210_r00"|' .repo/manifest.xml
          repo sync -c --no-clone-bundle -j$(nproc --all)
      # --- PASO MODIFICADO Y CORREGIDO ---
      # Paso 4: Integrar KernelSU-Next
      - name: 4. Integrate KernelSU-Next
        run: |
          cd gki_kernel
          # 1. Usamos el repositorio CORRECTO de KernelSU-Next y lo clonamos en una carpeta llamada 'KernelSU'
          git clone https://github.com/KernelSU-Next/KernelSU-Next.git
          # 2. Ejecutamos el script de instalación
          bash KernelSU-Next/kernel/setup.sh
      # --- PASO REINTEGRADO Y CORREGIDO ---
      # Paso 5: Integrar SUSFS para KernelSU-Next
      - name: 5. Integrate SUSFS for KernelSU-Next
        run: |
          # 1. Clonamos el repositorio de susfs
          git clone --depth=1 --branch kernel-5.4 https://gitlab.com/simonpunk/susfs4ksu.git
          
          # 2. Copiamos los parches y archivos a sus ubicaciones
          cp susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch gki_kernel/KernelSU-Next/
          cp susfs4ksu/kernel_patches/50_add_susfs_in_kernel-5.4.patch gki_kernel/common/
          cp -r susfs4ksu/kernel_patches/fs/* gki_kernel/common/fs/
          cp -r susfs4ksu/kernel_patches/include/linux/* gki_kernel/common/include/linux/
          
          # 3. Aplicamos el parche a KernelSU, permitiendo el fallo conocido
          cd gki_kernel/KernelSU-Next
          patch -p1 < 10_enable_susfs_for_ksu.patch
          cd ../..
          # 4. CORRECCIÓN MANUAL: Aplicamos el cambio del Hunk que falla con 'sed'
          # sed -i '/if (!is_ksud_present())/a \ \ \ \ ksu_load_allow_rules(cred);' gki_kernel/KernelSU-Next/kernel/selinux/selinux.c
          
          # 5. Aplicamos el parche principal al kernel
          # cd gki_kernel/common
          # patch -p1 < 50_add_susfs_in_kernel-5.4.patch
          # cd ../..
          echo "SUSFS patches applied successfully."
          
      # Paso 6: Crear Fragmento de Configuración GKI-Nativo
      - name: 6. Create GKI-Native Config Fragment
        run: |
          cd gki_kernel
          echo "CONFIG_KSU=y" > gki.fragment
          echo "CONFIG_KSU_SUSFS=y" >> gki.fragment
          echo "CONFIG_PROC_FS=y" >> gki.fragment
          echo "CONFIG_CPU_IDLE=y" >> gki.fragment
          echo "CONFIG_CPU_IDLE_GOV_MENU=y" >> gki.fragment
          echo "CONFIG_ARM_CPUIDLE=y" >> gki.fragment
          echo "CONFIG_ARM_PSCI_CPUIDLE=y" >> gki.fragment
          echo "CONFIG_PM_GENERIC_DOMAINS_SLEEP=y" >> gki.fragment
          echo "CONFIG_DRM=y" >> gki.fragment
          echo "CONFIG_DRM_KMS_HELPER=y" >> gki.fragment
          echo "CONFIG_DRM_MIPI_DSI=y" >> gki.fragment
          echo "CONFIG_DRM_BRIDGE=y" >> gki.fragment
          echo "CONFIG_DRM_PANEL_BRIDGE=y" >> gki.fragment
          echo "CONFIG_DRM_PANEL_SIMPLE=y" >> gki.fragment
          cp common/android/abi_gki_aarch64_unisoc common/android/abi_gki_aarch64
          cat common/android/abi_gki_aarch64_transsion >> common/android/abi_gki_aarch64
          
      # Paso 7: Personalizar Versión del Kernel
      - name: 7. Set Custom Kernel Version
        run: |
          sed -i 's/^echo "\$res"$/echo "-Max-X6525-GKI-Next"/' gki_kernel/common/scripts/setlocalversion
          echo "Kernel version hardcoded to -Max-X6525-GKI-Next"
      # Paso 8: Compilar el Kernel
      - name: 8. Build Kernel
        run: |
          cd gki_kernel
          while true; do echo "Build in progress - $(date)"; sleep 300; done &
          GKI_DEFCONFIG_FRAGMENT=gki.fragment LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh
      # Paso 9: Subir el artefacto de compilación
      - name: 9. Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: GKI-Build-Artifacts-5.4-Max-X6525-Next
          path: gki_kernel/out/android12-5.4/dist/
