# Nombre del workflow
name: Build GKI Kernel with KernelSU and SUSFS

# Cómo se activa este workflow
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-22.04
    steps:
      # Pasos 1-4 (Sin cambios)
      - name: 1. Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends git bc bison build-essential curl flex g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev
      - name: 2. Setup Repo Tool
        run: |
          mkdir -p ~/bin && curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo && chmod a+x ~/bin/repo && echo "$HOME/bin" >> $GITHUB_PATH
      - name: 3. Download Kernel Source
        run: |
          mkdir gki_kernel && cd gki_kernel
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android12-5.4-lts --depth 1 --no-repo-verify
          # sed -i 's|path="common" name="kernel/common" revision="android12-5.4"|path="common" name="kernel/common" revision="android12-5.4.210_r00"|' .repo/manifest.xml
          repo sync -c --no-tags --no-clone-bundle -j$(nproc --all)
      - name: 4. Integrate KernelSU
        run: |
          cd gki_kernel
          git clone https://github.com/maxsteeel/KernelSU
          
          bash KernelSU/kernel/setup.sh susfs-legacy

      # Paso 5: Integrar SUSFS para KernelSU (con Corrección Manual)
      - name: 5. Integrate SUSFS for KernelSU (with Patch Fix)
        run: |
          # 1. Clonamos el repositorio de susfs (sin cambios)
          git clone --branch kernel-5.4 https://gitlab.com/simonpunk/susfs4ksu.git
          
          # 2. Copiamos los parches y archivos (sin cambios)
          cp susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch gki_kernel/KernelSU/
          cp susfs4ksu/kernel_patches/50_add_susfs_in_kernel-5.4.patch gki_kernel/common/
          cp -r susfs4ksu/kernel_patches/fs/* gki_kernel/common/fs/
          cp -r susfs4ksu/kernel_patches/include/linux/* gki_kernel/common/include/linux/
          
          # 3. Aplicamos el parche a KernelSU, permitiendo que falle con '|| true'
          # cd gki_kernel/KernelSU
          # patch -p1 < 10_enable_susfs_for_ksu.patch || true
          # cd ../..

          # 4. CORRECCIÓN MANUAL: Aplicamos el cambio del Hunk #7 con 'sed'.
          #    Esto inserta la llamada a 'ksu_load_allow_rules' en el lugar correcto de selinux.c
          # sed -i '/if (!is_ksud_present())/a \ \ \ \ ksu_load_allow_rules(cred);' gki_kernel/KernelSU/kernel/selinux/selinux.c
          
          # 5. Aplicamos el parche principal al kernel (este no debería fallar)
          cd gki_kernel/common
          patch -p1 < 50_add_susfs_in_kernel-5.4.patch
          cd ../..
          echo "SUSFS patches applied successfully"

  
      
          
      # --- PASO MODIFICADO ---
      # Paso 7: Personalizar Versión del Kernel
      - name: 7. Set Custom Kernel Version
        run: |
          sed -i 's/^echo "\$res"$/echo "-Max-X6525-GKI"/' gki_kernel/common/scripts/setlocalversion
          echo "Kernel version hardcoded to -lts-Max-X6525-GKI-KSU-SUSFS"

      # --- PROCESO DE COMPILACIÓN SIMPLIFICADO ---
      # Paso 8: Compilar el Kernel (Primer Intento)
      - name: 8. Build Kernel (First Attempt)
        run: |
          cd gki_kernel
          while true; do echo "Build in progress - $(date)"; sleep 300; done &
          # Usamos el GKI_DEFCONFIG_FRAGMENT y el BUILD_CONFIG por defecto de GKI
          LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh
      
      # Paso 9: Subir el artefacto de compilación
      - name: 9. Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: GKI-Build-Artifacts-5.4-Max-X6525-GSI
          path: gki_kernel/out/android12-5.4/dist/

          
