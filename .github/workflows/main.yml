# Nombre del workflow
name: Build GKI Kernel with KernelSU

# Cómo se activa este workflow
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-22.04
    steps:
      # Paso 1: Instalar dependencias
      - name: 1. Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends git bc bison build-essential curl flex g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev

      # Paso 2: Configurar la herramienta "repo"
      - name: 2. Setup Repo Tool
        run: |
          mkdir -p ~/bin && curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo && chmod a+x ~/bin/repo && echo "$HOME/bin" >> $GITHUB_PATH

      # Paso 3: Descargar el código fuente del Kernel
      - name: 3. Download Kernel Source
        run: |
          mkdir gki_kernel && cd gki_kernel
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android12-5.4 --no-repo-verify
          sed -i 's|path="common" name="kernel/common" revision="android12-5.4"|path="common" name="kernel/common" revision="android12-5.4.210_r00"|' .repo/manifest.xml
          while true; do echo "Sync in progress... $(date)"; sleep 300; done &
          repo sync -c --no-clone-bundle -j$(nproc --all)

      # Paso 4: Integrar la versión v0.5.2 de KernelSU
      - name: 4. Integrate KernelSU v0.5.2
        run: |
          cd gki_kernel
          git clone https://github.com/tiann/KernelSU.git
          cd KernelSU
          # CORRECCIÓN: Nos movemos a la etiqueta de la versión v0.5.2
          git checkout v0.9.5
          cd ..
          
          bash KernelSU/kernel/setup.sh v0.9.5

       # Paso 5: Crear el fragmento de configuración
      - name: 5. Create KernelSU and LTO Config Fragment
        run: |
          cd gki_kernel
          echo "CONFIG_KSU=y" > ksu.fragment
          echo "CONFIG_KERNEL_SU=y" >> ksu.fragment
          echo "CONFIG_PROC_FS=y" >> ksu.fragment
          echo "# CONFIG_LTO_CLANG_FULL is not set" >> ksu.fragment
          echo "CONFIG_LTO_CLANG_THIN=y" >> ksu.fragment
          # --- INICIO DE LA LISTA COMPLETA DE CONFIGURACIONES DE UNISOC ---
          echo "" >> ksu.fragment
          echo "# --- Configuraciones de Arquitectura y Sistema Base de Unisoc ---" >> ksu.fragment
          echo "CONFIG_ARCH_SPRD=y" >> ksu.fragment
          echo "CONFIG_SPRD_CORE_CTL=y" >> ksu.fragment
          echo "CONFIG_SPRD_CORE_ISOLATION=y" >> ksu.fragment
          echo "CONFIG_SPRD_ROTATION_TASK=y" >> ksu.fragment
          echo "CONFIG_SPRD_SOCID=m" >> ksu.fragment
          echo "CONFIG_SPRD_SYSTIMER=m" >> ksu.fragment
          echo "" >> ksu.fragment
          echo "# --- Gestión de Energía (Deep Sleep) ---" >> ksu.fragment
          echo "CONFIG_SPRD_DEEP_SLEEP=y" >> ksu.fragment
          echo "CONFIG_SPRD_PM_STAT=m" >> ksu.fragment
          echo "CONFIG_SPRD_POWER_STAT=m" >> ksu.fragment
          echo "CONFIG_SPRD_POWER_MANAGER=m" >> ksu.fragment
          echo "" >> ksu.fragment
          echo "# --- Controladores de Frecuencia del CPU ---" >> ksu.fragment
          echo "CONFIG_ARM_SPRD_CPUFREQ_V2=m" >> ksu.fragment
          echo "CONFIG_ARM_SPRD_CPUFREQ_PUBLIC=m" >> ksu.fragment
          echo "" >> ksu.fragment
          echo "# --- Controladores de Hardware Clave (Pines, Relojes, Comunicación) ---" >> ksu.fragment
          echo "CONFIG_PINCTRL_SPRD=m" >> ksu.fragment
          echo "CONFIG_PINCTRL_SPRD_QOGIRL6=m" >> ksu.fragment
          echo "CONFIG_SPRD_COMMON_CLK=m" >> ksu.fragment
          echo "CONFIG_SPRD_UMS9230_CLK=m" >> ksu.fragment
          echo "CONFIG_UNISOC_IOMMU=m" >> ksu.fragment
          echo "CONFIG_UNISOC_MAILBOX=m" >> ksu.fragment
          echo "CONFIG_HWSPINLOCK_SPRD=m" >> ksu.fragment
          echo "" >> ksu.fragment
          echo "# --- Controladores del PMIC (Chip de Energía) ---" >> ksu.fragment
          echo "CONFIG_MFD_SC27XX_PMIC=m" >> ksu.fragment
          echo "CONFIG_REGULATOR_SC2730=m" >> ksu.fragment
          echo "CONFIG_REGULATOR_UMP518=m" >> ksu.fragment
          echo "CONFIG_POWER_RESET_SC27XX=m" >> ksu.fragment
          echo "CONFIG_RTC_DRV_SC27XX=m" >> ksu.fragment
          echo "CONFIG_WATCHDOG_SPRD_FIQ=m" >> ksu.fragment
          echo "CONFIG_WATCHDOG_SPRD_PMIC=m" >> ksu.fragment
          echo "" >> ksu.fragment
          echo "# --- Comunicación con el Módem (SIPC) ---" >> ksu.fragment
          echo "CONFIG_SPRD_SIPC=m" >> ksu.fragment
          echo "CONFIG_SPRD_SIPC_SPIPE=m" >> ksu.fragment
          echo "CONFIG_SPRD_SIPC_SPOOL=m" >> ksu.fragment
          echo "CONFIG_SPRD_SIPC_SLOG_BRIDGE=m" >> ksu.fragment
          echo "CONFIG_SPRD_SIPC_SBUF_BRIDGE=m" >> ksu.fragment
          echo "CONFIG_SPRD_SIPC_SBLOCK_BRIDGE=m" >> ksu.fragment
          echo "CONFIG_SPRD_SIPC_WCN=y" >> ksu.fragment
      # --- FIN DE LA LISTA ---
    
      # PASO NUEVO Y CLAVE
      # Paso 6: Preparar la configuración para los módulos de Unisoc
      - name: 6. Prepare Build Config for Unisoc Modules
        run: |
          echo "KMI_SYMBOL_LIST_ADD_SYMBOLS_FROM_MODULES=$GITHUB_WORKSPACE/unisoc_modules" > gki_kernel/common/build.config.unisoc
          echo "TRIM_NONLISTED_KMI=0" >> gki_kernel/common/build.config.unisoc
          # CORRECCIÓN CLAVE: Desactivamos el modo estricto para permitir nuestros módulos
          echo "KMI_SYMBOL_LIST_STRICT_MODE=0" >> gki_kernel/common/build.config.unisoc
          cat gki_kernel/common/build.config.gki.aarch64 >> gki_kernel/common/build.config.unisoc
          echo "Configuraciones unificadas en build.config.unisoc"
          
      # Paso 7: Compilar el Kernel (se espera que falle al final, es normal)
      - name: 7. Build Kernel
        run: |
          cd gki_kernel
          while true; do echo "Build in progress - $(date)"; sleep 300; done &
          # Ejecutamos la compilación. El '|| true' asegura que el workflow continúe aunque este paso falle.
          (GKI_DEFCONFIG_FRAGMENT=ksu.fragment LTO=thin BUILD_CONFIG=common/build.config.unisoc build/build.sh) || true

      # Paso 8: Actualizar la lista de módulos y empaquetar
      - name: 8. Update Module List and Package Artifacts
        run: |
          cd gki_kernel
          # 1. Copiamos la nueva lista de módulos como indica el log
          cp out/android12-5.4/common/modules.order common/android/gki_aarch64_modules
          echo "Lista de módulos actualizada."
          # 2. Volvemos a ejecutar el script, que ahora solo empaquetará los resultados
          GKI_DEFCONFIG_FRAGMENT=ksu.fragment LTO=thin BUILD_CONFIG=common/build.config.unisoc build/build.sh
      
      # Paso 9: Subir el artefacto de compilación
      - name: 9. Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: GKI-Build-Artifacts-5.4.210-Unisoc
          path: gki_kernel/out/android12-5.4/dist/
