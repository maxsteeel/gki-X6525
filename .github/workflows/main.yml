# Nombre del workflow
name: Build GKI Kernel with KernelSU (v21 - Corrected)

# Cómo se activa este workflow
on:
  workflow_dispatch:

# Definimos los trabajos a realizar
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      # Paso 1: Instalar dependencias del sistema
      - name: 1. Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git bc bison build-essential curl flex g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev

      # Paso 2: Descargar y configurar la herramienta "repo" de Google
      - name: 2. Setup Repo Tool
        run: |
          mkdir -p ~/bin
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+x ~/bin/repo
          echo "$HOME/bin" >> $GITHUB_PATH

      # Paso 3: Descargar el código fuente del Kernel GKI 5.4
      - name: 3. Download Kernel Source
        run: |
          mkdir gki_kernel && cd gki_kernel
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android12-5.4 --no-repo-verify
          repo sync -c --no-tags --no-clone-bundle -j$(nproc --all)

      # Paso 4: Integrar la última versión de KernelSU
      # Se elimina el checkout a la v0.9.5 para usar la versión más reciente y compatible.
      # El script setup.sh moderno se encarga de la compatibilidad.
      - name: 4. Integrate Latest KernelSU
        run: |
          cd gki_kernel
          git clone https://github.com/tiann/KernelSU.git
          bash KernelSU/kernel/setup.sh

      # Paso 5: Aplicar parche para la redefinición de 'current_sid'
      # La rama del kernel seleccionada ya define 'current_sid' en un header.
      # Renombramos la función en el código de KernelSU para evitar el conflicto.
      - name: 5. Patch KernelSU for 'current_sid' redefinition
        run: |
          cd gki_kernel
          sed -i 's/static inline u32 current_sid(void)/static inline u32 ksu_current_sid(void)/g' common/drivers/kernelsu/selinux/selinux.c
          sed -i 's/current_sid()/ksu_current_sid()/g' common/drivers/kernelsu/selinux/selinux.c

      # Paso 6: Crear el fragmento de configuración para KernelSU
      - name: 6. Create KernelSU Config Fragment
        run: |
          cd gki_kernel
          echo "CONFIG_KERNEL_SU=y" > kernelsu.fragment
          echo "CONFIG_PROC_FS=y" >> kernelsu.fragment

      # Paso 7: Compilar el Kernel
      - name: 7. Build Kernel
        run: |
          cd gki_kernel
          # El bucle while mantiene el job activo durante la compilación
          while true; do echo "Build in progress - $(date)"; sleep 300; done &
          GKI_DEFCONFIG_FRAGMENT=kernelsu.fragment BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh

      # Paso 8: Subir el artefacto de compilación (boot.img)
      - name: 8. Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: boot-image-gki-5.4-kernelsu
          path: gki_kernel/out/android-5.4/dist/boot.img
      - name: 4. Integrate Latest KernelSU
        run: |
          cd gki_kernel
          git clone https://github.com/tiann/KernelSU.git
          bash KernelSU/kernel/setup.sh

      # PASO 5 ELIMINADO: El parche manual con 'sed' ya no es necesario.

      # Paso 5: Crear el fragmento de configuración para KernelSU
      - name: 5. Create KernelSU Config Fragment
        run: |
          cd gki_kernel
          echo "CONFIG_KERNEL_SU=y" > kernelsu.fragment
          echo "CONFIG_PROC_FS=y" >> kernelsu.fragment

      # Paso 6: Compilar el Kernel
      - name: 6. Build Kernel
        run: |
          cd gki_kernel
          # El bucle while mantiene el job activo durante la compilación
          while true; do echo "Build in progress - $(date)"; sleep 300; done &
          GKI_DEFCONFIG_FRAGMENT=kernelsu.fragment BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh

      # Paso 7: Subir el artefacto de compilación (boot.img)
      - name: 7. Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: boot-image-gki-5.4-kernelsu
          path: gki_kernel/out/android-5.4/dist/boot.img
          
