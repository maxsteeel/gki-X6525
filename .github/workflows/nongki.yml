name: Build Non-GKI Kernel & Release

on:
  workflow_dispatch: # Permite iniciar el workflow manualmente desde la pestaña "Actions" de GitHub

permissions:
  contents: write # Esencial para que el workflow pueda crear un release en tu repositorio

jobs:
  build_kernels:
    name: Build for ${{ matrix.config }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Si una compilación de la matriz falla, las otras continuarán
      matrix:
        config:
          - "android12-5.4"
          # Agrega o elimina las configuraciones de kernel que necesites aquí

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git curl repo make gcc zip bc libncurses-dev flex bison libssl-dev \
            gcc-aarch64-linux-gnu libc6-dev

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'

      - name: Build Kernel
        run: |
          set -e # Salir inmediatamente si un comando falla

          # 1. Configuración del Entorno
          CONFIG="${{ matrix.config }}"
          IFS="-" read -r ANDROID_VERSION KERNEL_VERSION STABLE <<< "$CONFIG"

          if [ "${STABLE:-}" = "stable" ]; then
              FORMATTED_BRANCH="${ANDROID_VERSION}-${KERNEL_VERSION}-${STABLE}"
          else
              FORMATTED_BRANCH="${ANDROID_VERSION}-${KERNEL_VERSION}"
          fi
          
          echo "::group::Cloning Dependencies for $CONFIG"
          git clone https://github.com/TheWildJames/AnyKernel3.git 
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "kernel-${KERNEL_VERSION}"
          echo "::endgroup::"
          
          # 2. Descargar Código Fuente del Kernel
          echo "::group::Downloading Kernel Source for $CONFIG"
          mkdir -p "$CONFIG" && cd "$CONFIG"
          repo init --depth=1 -u https://android.googlesource.com/kernel/manifest -b "common-${FORMATTED_BRANCH}"
          
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common "common-${FORMATTED_BRANCH}")
          if grep -q deprecated <<< "$REMOTE_BRANCH"; then
              echo "Branch is deprecated, adjusting manifest..."
              sed -i "s/\"common-${FORMATTED_BRANCH}\"/\"deprecated\/common-${FORMATTED_BRANCH}\"/g" .repo/manifests/default.xml
          fi
          repo sync -c -j$(nproc --all) --no-tags --fail-fast
          echo "::endgroup::"

          # 3. Aplicar Patches (KernelSU y SUSFS)
          echo "::group::Patching Kernel for $CONFIG"
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5
          
          echo "Applying SUSFS patches..."
          cp ../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_kernel-${KERNEL_VERSION}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/susfs.c ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/susfs.h ./common/include/linux/
          cp ../susfs4ksu/kernel_patches/fs/sus_su.c ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/sus_su.h ./common/include/linux/

          (cd ./KernelSU && patch -p1 -f -F 3 < 10_enable_susfs_for_ksu.patch) || echo "Patch 1 failed but continuing..."
          (cd ./common && patch -p1 -f -F 3 < 50_add_susfs_in_kernel-${KERNEL_VERSION}.patch) || echo "Patch 2 failed but continuing..."
          echo "::endgroup::"

          # 4. Configurar y Compilar
          echo "::group::Configuring and Building Kernel for $CONFIG"
          DEFCONFIG_PATH="./common/arch/arm64/configs/defconfig"
          echo "CONFIG_KSU=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$DEFCONFIG_PATH"
          
          cd ./common
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig -j$(nproc)
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)
          echo "::endgroup::"

          # 5. Empaquetar con AnyKernel3
          echo "::group::Packaging Kernel for $CONFIG"
          # GKI builds place Image in dist/, non-GKI in arch/arm64/boot/
          KERNEL_IMAGE_PATH=$(find . -path "*arch/arm64/boot/Image" -o -path "*dist/Image")
          if [ -z "$KERNEL_IMAGE_PATH" ]; then
            echo "Kernel Image not found!"
            exit 1
          fi

          echo "Kernel image found at: $KERNEL_IMAGE_PATH"
          cp "$KERNEL_IMAGE_PATH" ../AnyKernel3/Image
          
          cd ../AnyKernel3
          zip -r9 "../AnyKernel3-${CONFIG}.zip" ./*
          echo "::endgroup::"

      - name: Upload Kernel Zip as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel-zips
          path: ./*.zip # Sube todos los zips generados en este job

  create_release:
    name: Create GitHub Release
    needs: build_kernels # Este job se ejecuta solo si 'build_kernels' tuvo éxito
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all Kernel Zips
        uses: actions/download-artifact@v4
        with:
          name: kernel-zips
          path: release-assets/

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="v$(date +'%Y.%m.%d-%H%M%S')"
          RELEASE_NAME="Non-GKI Kernels With KernelSU & SUSFS v1.5.2"
          RELEASE_NOTES="This release contains KernelSU and SUSFS v1.5.2 for various non-GKI kernel versions."
          
          gh release create "$TAG_NAME" release-assets/*.zip \
            --title "$RELEASE_NAME" \
            --notes "$RELEASE_NOTES"
